use serde::Serialize;

use crate::{
    network,
    requests::{Request, ResponseResult},
    types::ChatId,
    Bot,
};

/// Use this method to generate a new invite link for a chat; any previously
/// generated link is revoked. The bot must be an administrator in the chat for
/// this to work and must have the appropriate admin rights. Returns the new
/// invite link as String on success.Note: Each administrator in a chat
/// generates their own invite links. Bots can't use invite links generated by
/// other administrators. If you want your bot to work with invite links, it
/// will need to generate its own link using exportChatInviteLink â€“ after this
/// the link will become available to the bot via the getChat method. If your
/// bot needs to generate a new invite link replacing its previous one, use
/// exportChatInviteLink again.
#[serde_with_macros::skip_serializing_none]
#[derive(Debug, Clone, Serialize)]
pub struct ExportChatInviteLink<'a> {
    #[serde(skip_serializing)]
    bot: &'a Bot,

    /// Unique identifier for the target chat or username of the target channel
    /// (in the format @channelusername)
    chat_id: ChatId,
}

#[async_trait::async_trait]
impl Request<String> for ExportChatInviteLink<'_> {
    async fn send(&self) -> ResponseResult<String> {
        network::request_json(
            self.bot.client(),
            self.bot.token(),
            "exportChatInviteLink",
            &serde_json::to_string(self).unwrap(),
        )
        .await
    }
}

impl<'a> ExportChatInviteLink<'a> {
    pub(crate) fn new<C>(bot: &'a Bot, chat_id: C) -> Self
    where
        C: Into<ChatId>,
    {
        let chat_id = chat_id.into();
        Self { bot, chat_id }
    }

    pub fn chat_id<T>(mut self, val: T) -> Self
    where
        T: Into<ChatId>,
    {
        self.chat_id = val.into();
        self
    }
}
